package main

import (
	// "os"
	"os/exec"
	"fmt"
	"time"
	"strconv"
	"bytes"
	"encoding/json"
	"github.com/godbus/dbus"
	"github.com/getlantern/systray"
	"github.com/hyperledger/fabric/core/chaincode/shim"
	"github.com/hyperledger/fabric/protos/peer"
)

var Data []byte = []byte{
	0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
	0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
	0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7a, 0x7a, 0xf4, 0x00, 0x00, 0x00,
	0x04, 0x73, 0x42, 0x49, 0x54, 0x08, 0x08, 0x08, 0x08, 0x7c, 0x08, 0x64,
	0x88, 0x00, 0x00, 0x05, 0xf7, 0x49, 0x44, 0x41, 0x54, 0x58, 0x85, 0xed,
	0x96, 0xcd, 0x6f, 0x54, 0xd7, 0x19, 0xc6, 0x7f, 0xf7, 0x7b, 0x66, 0x7c,
	0xc7, 0x9e, 0xf1, 0x18, 0x1b, 0x8c, 0x83, 0x1d, 0x70, 0x80, 0x44, 0x45,
	0x4a, 0x53, 0x08, 0x4d, 0xd2, 0x12, 0xa0, 0x10, 0x44, 0x42, 0x42, 0xa4,
	0x46, 0x5e, 0xb5, 0x6a, 0xd4, 0x2a, 0x65, 0xd1, 0x74, 0x11, 0x09, 0xd4,
	0x42, 0xbb, 0xf0, 0x22, 0x01, 0x6c, 0x10, 0xed, 0x86, 0xfe, 0x03, 0xed,
	0x26, 0x52, 0xa5, 0x56, 0xad, 0xd4, 0xaa, 0x59, 0x44, 0x8a, 0x2a, 0xb0,
	0x51, 0xab, 0x44, 0x4a, 0x1a, 0xec, 0xc6, 0x60, 0x9b, 0x12, 0x9b, 0x0f,
	0x8d, 0xb1, 0x3d, 0x1f, 0xe7, 0xdc, 0x73, 0xef, 0x3d, 0xf7, 0x74, 0x61,
	0xd7, 0x0a, 0x09, 0x91, 0x52, 0xab, 0x55, 0xa5, 0x8a, 0x67, 0x73, 0x56,
	0x47, 0xcf, 0xa3, 0xf7, 0xf7, 0x9c, 0x57, 0x07, 0xfe, 0xc7, 0xb2, 0x56,
	0x73, 0xe9, 0xf4, 0xe9, 0xd3, 0x1b, 0x2c, 0x5b, 0x1f, 0xcf, 0xe0, 0xa0,
	0x05, 0x9d, 0x60, 0x5d, 0x31, 0xc6, 0xfc, 0x52, 0xc9, 0xe4, 0xfc, 0xe0,
	0xe0, 0xa0, 0xf8, 0xaf, 0x06, 0x38, 0x75, 0xf6, 0xd4, 0x8e, 0xbc, 0x1f,
	0xfc, 0xf1, 0xd1, 0x47, 0xbf, 0x5c, 0x79, 0xa0, 0x67, 0x03, 0xbe, 0xe7,
	0x31, 0x77, 0x67, 0x8e, 0xb1, 0xf1, 0xcb, 0x5c, 0xbb, 0x36, 0xfd, 0x97,
	0x2c, 0xb5, 0x0e, 0x9e, 0x38, 0x71, 0x62, 0xee, 0x3f, 0x12, 0x60, 0x68,
	0xe8, 0xe4, 0x8b, 0xc6, 0x32, 0xaf, 0xda, 0xb6, 0xb3, 0xcd, 0x98, 0xac,
	0x89, 0x31, 0x7f, 0xca, 0xe7, 0x0b, 0x87, 0x0e, 0x1d, 0x3a, 0xdc, 0x13,
	0xb6, 0xb4, 0x10, 0x86, 0x21, 0x5a, 0x6b, 0x6a, 0xb5, 0x1a, 0x52, 0x45,
	0x5c, 0xfe, 0xf0, 0x6f, 0x8c, 0x8d, 0x5d, 0x7e, 0xd3, 0x42, 0xff, 0x04,
	0x9c, 0x6e, 0xdb, 0x8e, 0xc7, 0x8e, 0x1e, 0x1d, 0xac, 0xae, 0x2a, 0xc0,
	0xd0, 0x99, 0x37, 0x86, 0x2b, 0xed, 0x1d, 0xc7, 0xf6, 0xee, 0xd9, 0xc7,
	0xba, 0xee, 0x6e, 0x54, 0x14, 0x31, 0x39, 0x35, 0x89, 0xc9, 0x32, 0xfa,
	0xfa, 0x1e, 0xa4, 0xbd, 0xbd, 0x42, 0x14, 0x45, 0x08, 0xd1, 0xa4, 0x29,
	0x9a, 0x08, 0x21, 0x30, 0x99, 0xe1, 0xe2, 0xe8, 0x05, 0x3c, 0xcf, 0x23,
	0xcb, 0x32, 0xe6, 0xe7, 0xef, 0x68, 0xa5, 0xd4, 0x9b, 0x46, 0xdb, 0xaf,
	0x1e, 0x3f, 0x7e, 0x7c, 0xfe, 0x0b, 0x07, 0x18, 0x1e, 0x3e, 0x79, 0xa8,
	0xbd, 0x52, 0xf9, 0xfd, 0xb7, 0xbf, 0xf5, 0x32, 0x32, 0x92, 0x14, 0xc3,
	0x22, 0x71, 0x1c, 0xb3, 0x58, 0x5b, 0x00, 0x03, 0x9d, 0x9d, 0x5d, 0x24,
	0x49, 0x42, 0xb3, 0xb9, 0x6c, 0xbe, 0x7c, 0x9a, 0x4c, 0x53, 0xae, 0x54,
	0xb0, 0x8c, 0x85, 0x8c, 0x04, 0x8d, 0x46, 0x83, 0x89, 0x89, 0x09, 0xae,
	0x7f, 0x7c, 0xfd, 0x03, 0xc7, 0xf2, 0x9e, 0x38, 0x76, 0xec, 0x58, 0xf3,
	0xd3, 0x5e, 0xee, 0xbd, 0x02, 0x18, 0xb2, 0x1f, 0xec, 0xdf, 0x77, 0x80,
	0xe9, 0xe9, 0x49, 0x46, 0x2f, 0x8d, 0x50, 0x9d, 0xab, 0x92, 0xcf, 0x17,
	0xd8, 0xb2, 0x79, 0x0b, 0xeb, 0xd7, 0xf7, 0x50, 0x28, 0xe4, 0xd1, 0x3a,
	0xc3, 0xf7, 0x3d, 0xa0, 0x40, 0x9a, 0x26, 0x08, 0x21, 0xe8, 0xdf, 0xbc,
	0x15, 0x0b, 0x8b, 0x28, 0x92, 0x38, 0xae, 0x03, 0x58, 0xf4, 0xf7, 0x3f,
	0x84, 0x8c, 0xe4, 0xb6, 0x6a, 0xb5, 0xfa, 0x1a, 0xf0, 0xfa, 0x17, 0x0a,
	0x60, 0x59, 0xf6, 0x36, 0xc7, 0x75, 0x79, 0xe7, 0xcf, 0xef, 0xf0, 0xf4,
	0xae, 0xdd, 0xb4, 0xb5, 0x95, 0x58, 0x5c, 0x5c, 0x60, 0x64, 0xf4, 0x02,
	0x91, 0x92, 0x3c, 0xd4, 0xbf, 0x19, 0x00, 0xa5, 0x22, 0x2c, 0xcb, 0x22,
	0x97, 0xcb, 0x51, 0x2a, 0x97, 0x10, 0x42, 0x60, 0xdb, 0x36, 0x51, 0x24,
	0x89, 0xa4, 0x24, 0x49, 0x62, 0x0c, 0x86, 0x0d, 0x0f, 0x6c, 0xa0, 0x5a,
	0xad, 0x0e, 0xdc, 0x2b, 0xc0, 0x0a, 0x82, 0x73, 0xe7, 0xce, 0xe5, 0xb5,
	0x51, 0xc3, 0x58, 0xd6, 0x80, 0xc9, 0xcc, 0x9a, 0x2c, 0xcb, 0xac, 0x97,
	0xbe, 0x39, 0x40, 0xa5, 0xbd, 0x42, 0xb1, 0xd8, 0x8a, 0x94, 0x82, 0x5b,
	0xb7, 0x6f, 0xf3, 0x9b, 0xdf, 0xfe, 0x1a, 0xd7, 0xf5, 0x00, 0xe8, 0x5e,
	0xb7, 0x8e, 0x1d, 0xdb, 0x77, 0xe2, 0xb8, 0x0e, 0x4a, 0x29, 0xe2, 0x58,
	0x51, 0x0c, 0x5b, 0x89, 0x54, 0x44, 0x14, 0x49, 0xa4, 0x94, 0xe8, 0x34,
	0x25, 0x49, 0x35, 0xa3, 0x97, 0x2e, 0xd6, 0xca, 0x6d, 0x1d, 0x1d, 0x47,
	0x8e, 0x1c, 0x49, 0xee, 0x19, 0xe0, 0xec, 0xcf, 0x86, 0xde, 0xfa, 0xca,
	0x63, 0x3b, 0x76, 0x6d, 0x7f, 0x6c, 0x47, 0x60, 0x30, 0xdc, 0xba, 0x79,
	0x83, 0x72, 0xb9, 0x4c, 0xb1, 0xd8, 0x8a, 0xd6, 0x19, 0x4a, 0x45, 0xcc,
	0x2f, 0xcc, 0x33, 0x33, 0x33, 0x43, 0xa9, 0xad, 0x84, 0xce, 0x62, 0x26,
	0xa7, 0xa6, 0x99, 0x99, 0xfd, 0x98, 0xfd, 0x7b, 0x9f, 0x21, 0xd5, 0x1a,
	0xa5, 0x22, 0x6a, 0xf5, 0x3a, 0x1f, 0xfd, 0x7d, 0x8c, 0x5a, 0xbd, 0x46,
	0x10, 0xe4, 0xe8, 0x5e, 0xd7, 0x4d, 0x57, 0xd7, 0x5a, 0xae, 0x5c, 0xbd,
	0xc2, 0xed, 0x5b, 0x37, 0xfe, 0xf0, 0x60, 0xdf, 0xe6, 0x17, 0x06, 0x06,
	0x06, 0xf4, 0x5d, 0x08, 0x86, 0x86, 0xde, 0xd8, 0xb3, 0xb1, 0x6f, 0xd3,
	0x13, 0x8f, 0xef, 0xd8, 0x19, 0x78, 0xae, 0x47, 0x92, 0x24, 0xb4, 0x84,
	0x21, 0x2d, 0x2d, 0x45, 0x7c, 0x3f, 0x00, 0x20, 0x49, 0x62, 0x62, 0xa5,
	0xd8, 0xba, 0x65, 0x2b, 0x61, 0x58, 0x44, 0x4a, 0x81, 0xeb, 0xf8, 0x44,
	0x52, 0x72, 0x79, 0xec, 0x43, 0xfa, 0xfa, 0x36, 0x32, 0x37, 0x37, 0xc7,
	0xd5, 0xc9, 0xab, 0xec, 0xdd, 0xf3, 0x0d, 0x4a, 0x6d, 0x25, 0x16, 0x16,
	0xe6, 0x19, 0x19, 0xbd, 0x40, 0x96, 0x19, 0xfa, 0x37, 0xf5, 0x23, 0x85,
	0x78, 0x76, 0xea, 0xda, 0x47, 0x3f, 0x04, 0x7e, 0xfe, 0xaf, 0x00, 0x0e,
	0xc0, 0x81, 0x83, 0xfb, 0xbf, 0xfb, 0xd4, 0x93, 0x5f, 0xdf, 0x17, 0xb6,
	0x84, 0x96, 0x31, 0x86, 0x5a, 0xad, 0x46, 0x57, 0xe7, 0xda, 0x95, 0xe7,
	0x24, 0x44, 0x93, 0x48, 0x29, 0x00, 0x3c, 0xcf, 0x47, 0xc5, 0x11, 0x42,
	0x08, 0x74, 0x96, 0x21, 0xa5, 0x64, 0xe2, 0xca, 0x04, 0x53, 0x53, 0x93,
	0xcc, 0xcc, 0xce, 0x70, 0xf8, 0x85, 0x17, 0xe9, 0xa8, 0x74, 0x50, 0x2a,
	0x95, 0xc9, 0xe5, 0xf3, 0x54, 0x2a, 0x15, 0x46, 0x2f, 0x8d, 0x30, 0x33,
	0x3b, 0x4b, 0x92, 0x26, 0xd8, 0x96, 0xfd, 0xb5, 0x5d, 0x07, 0x76, 0xff,
	0xea, 0xed, 0xb7, 0xde, 0xae, 0xad, 0x4c, 0x40, 0xa7, 0xd9, 0x16, 0x29,
	0x65, 0xa6, 0x94, 0x72, 0x52, 0x9d, 0x92, 0xcf, 0xe7, 0xb1, 0x6d, 0x9b,
	0x24, 0x49, 0x90, 0x52, 0x20, 0xa5, 0x24, 0x49, 0x12, 0x5c, 0xd7, 0x65,
	0x71, 0x71, 0x01, 0x2c, 0x83, 0x52, 0x31, 0x52, 0x0a, 0xea, 0xf5, 0x1a,
	0x60, 0xf3, 0xfd, 0x57, 0x5e, 0xe1, 0xd6, 0xcd, 0x5b, 0x14, 0x8b, 0xad,
	0xe4, 0xf3, 0x05, 0xe2, 0x38, 0x46, 0xa7, 0x29, 0x96, 0xe5, 0xf0, 0xd5,
	0x9d, 0x4f, 0x52, 0x6a, 0x2b, 0x91, 0xa4, 0x09, 0x53, 0x93, 0x93, 0xe1,
	0xd4, 0xb5, 0xab, 0x97, 0x06, 0x07, 0x07, 0x37, 0x0f, 0x0e, 0x0e, 0x36,
	0xdc, 0x93, 0x67, 0x4f, 0x3e, 0x52, 0x6e, 0x2d, 0x3d, 0xd7, 0xbb, 0xa1,
	0xd7, 0x01, 0x0b, 0xd2, 0x94, 0x7c, 0xbe, 0x40, 0x14, 0x45, 0x48, 0x29,
	0x91, 0x52, 0x90, 0xa6, 0xc9, 0xf2, 0xd8, 0x25, 0xc6, 0x64, 0x08, 0xb1,
	0x14, 0x2a, 0x4d, 0x53, 0xa2, 0x28, 0x22, 0xf0, 0x7d, 0xc6, 0xc7, 0xc7,
	0xe9, 0x59, 0xdf, 0x43, 0xd8, 0x12, 0x12, 0x04, 0x4b, 0xd8, 0xe2, 0x24,
	0x26, 0x89, 0xe3, 0xbb, 0xb0, 0xf9, 0x9e, 0x87, 0x50, 0xa2, 0xdd, 0x98,
	0xd9, 0x9f, 0x02, 0x3f, 0xb6, 0x7d, 0xdb, 0x3d, 0xfd, 0xfc, 0xa1, 0xc3,
	0x2d, 0xbe, 0x1f, 0xd0, 0xde, 0xde, 0x4e, 0x10, 0x04, 0x34, 0x45, 0x93,
	0x46, 0xb3, 0x41, 0xa3, 0x59, 0xa7, 0xd1, 0x6c, 0x90, 0x19, 0x83, 0x10,
	0x02, 0x21, 0x9a, 0x08, 0x29, 0x10, 0x62, 0xc9, 0x5c, 0xa9, 0x88, 0xde,
	0xde, 0x5e, 0x1e, 0x7e, 0xe4, 0x61, 0x46, 0x46, 0x2e, 0xd0, 0xd5, 0xb5,
	0x96, 0x5c, 0x2e, 0x47, 0x96, 0x65, 0x34, 0x9a, 0x0d, 0xe2, 0x38, 0x26,
	0x9f, 0xcf, 0x03, 0x16, 0xf5, 0x7a, 0x8d, 0x46, 0xa3, 0x81, 0xeb, 0x79,
	0x94, 0x4b, 0xe5, 0x00, 0xec, 0x97, 0x00, 0x5c, 0x83, 0xf9, 0x52, 0xa1,
	0xd0, 0x82, 0xe7, 0x79, 0x2c, 0x2c, 0x2e, 0x70, 0x67, 0xfe, 0x0e, 0x4a,
	0x29, 0x5a, 0x0a, 0x05, 0x84, 0x5c, 0x7a, 0x4a, 0xae, 0xeb, 0x92, 0xcb,
	0xe5, 0x56, 0x70, 0x68, 0xbd, 0x54, 0xe2, 0x20, 0xc8, 0xad, 0x34, 0x39,
	0xd5, 0x9a, 0x38, 0x56, 0x38, 0x8e, 0xfb, 0x59, 0x6c, 0xb5, 0x85, 0xe5,
	0xbd, 0xa1, 0x90, 0x72, 0x69, 0x43, 0x1a, 0xa3, 0xd7, 0x00, 0xb8, 0x36,
	0xd6, 0xfb, 0x37, 0x6e, 0xcc, 0xf6, 0x75, 0x74, 0x54, 0xac, 0x7a, 0xbd,
	0xc1, 0x9d, 0xb9, 0x39, 0xe2, 0x24, 0x26, 0x8a, 0x24, 0x5a, 0x67, 0xc4,
	0xb1, 0x5a, 0xb9, 0x9c, 0xa6, 0x09, 0x59, 0x96, 0x7d, 0x66, 0x71, 0x29,
	0x15, 0xe1, 0xb9, 0x2e, 0x60, 0xd1, 0x68, 0xd4, 0x97, 0xcc, 0xd3, 0x94,
	0x62, 0x18, 0x22, 0xa5, 0x5c, 0x2e, 0xb2, 0x20, 0x8a, 0x96, 0xb1, 0x49,
	0x89, 0xef, 0x05, 0xce, 0x99, 0x33, 0x43, 0xdf, 0x73, 0x76, 0x3f, 0xb3,
	0xe7, 0xdd, 0xeb, 0xd3, 0xd3, 0x2f, 0x77, 0x76, 0x76, 0x05, 0xad, 0xad,
	0x6d, 0x14, 0x8b, 0x45, 0xc2, 0x30, 0xc4, 0xf7, 0x7d, 0x3c, 0xd7, 0xc5,
	0xf3, 0x7d, 0x5c, 0xd7, 0x21, 0xcb, 0x34, 0x59, 0x96, 0x61, 0x8c, 0x59,
	0x31, 0x36, 0xc6, 0x20, 0x9a, 0x4d, 0x26, 0xae, 0x4c, 0xb0, 0x7d, 0xfb,
	0xe3, 0x84, 0x61, 0xb8, 0x84, 0x49, 0x08, 0x5c, 0xc7, 0x46, 0x6b, 0x8d,
	0x94, 0x62, 0x65, 0x92, 0x5a, 0x2f, 0x61, 0x2b, 0x97, 0x2b, 0x74, 0x76,
	0xae, 0xf1, 0x67, 0x6f, 0xde, 0x78, 0xca, 0x02, 0x38, 0x7d, 0xf6, 0xf5,
	0x5d, 0xae, 0xe3, 0x9f, 0xd7, 0x69, 0xba, 0xd5, 0x18, 0x73, 0xcf, 0xf5,
	0x7c, 0x2f, 0x59, 0x96, 0x45, 0x6b, 0xb1, 0x95, 0x8d, 0x9b, 0xfa, 0xe9,
	0x59, 0xdf, 0x43, 0xa1, 0x50, 0x58, 0x2e, 0xee, 0x32, 0xb6, 0x20, 0x87,
	0x8c, 0xee, 0xc6, 0xf6, 0x49, 0x5d, 0x1c, 0xb9, 0xa8, 0x56, 0xf5, 0x23,
	0x3a, 0x7b, 0x6e, 0xf8, 0x77, 0xcf, 0x1e, 0x7c, 0xee, 0xf9, 0x4a, 0x47,
	0x07, 0xcd, 0x7a, 0x9d, 0x6a, 0xb5, 0x4a, 0x9c, 0x2c, 0x15, 0xee, 0x93,
	0xd8, 0x7c, 0x3f, 0xf8, 0x5c, 0x6c, 0x51, 0xa4, 0x78, 0xf7, 0xbd, 0xbf,
	0xce, 0x3b, 0xab, 0x09, 0xb0, 0x7b, 0xff, 0x9e, 0xf7, 0xfe, 0x71, 0x6d,
	0xfa, 0x3b, 0x5d, 0x9d, 0x5d, 0x41, 0xdb, 0xa7, 0xb0, 0xb9, 0xae, 0xbb,
	0x7c, 0x7e, 0x3e, 0xb6, 0xa6, 0x68, 0x32, 0x3e, 0x7e, 0xb9, 0xa1, 0x8d,
	0x79, 0x6d, 0x55, 0x13, 0x00, 0x18, 0x1e, 0x3e, 0xf9, 0xb4, 0xe3, 0x3a,
	0xe7, 0x53, 0xad, 0xb7, 0xfc, 0x9b, 0xd8, 0x8c, 0xe3, 0x38, 0x33, 0x3a,
	0xcb, 0x4e, 0xfd, 0xe8, 0xe8, 0xf1, 0x5f, 0xac, 0xd6, 0xff, 0xbe, 0xee,
	0xeb, 0xbe, 0xee, 0xeb, 0xff, 0x47, 0xff, 0x04, 0xde, 0xbc, 0x54, 0xa5,
	0xb6, 0x34, 0xfb, 0x28, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44,
	0xae, 0x42, 0x60, 0x82,
}

type Shell struct {
}

func (t *Shell) Init(stub shim.ChaincodeStubInterface) peer.Response {
	return shim.Success(nil)
}

func (t *Shell) Invoke(stub shim.ChaincodeStubInterface) peer.Response {

    errorString := ""

	function, arguments := stub.GetFunctionAndParameters()
    command := arguments[0]
    fmt.Printf("Invoked: %s \"%s\"\n", function, command)

    notification("HyperShell", "Executing \"" + command + "\"")

    // Executing the requested command
    cmd := exec.Command("bash", "-c", command)
    var stdout, stderr bytes.Buffer
    cmd.Stdout = &stdout
    cmd.Stderr = &stderr
    error := cmd.Run()
    if error != nil {
        errorString = fmt.Sprintf("cmd.Run() failed with %s\n", error)
        return shim.Error(errorString)
    }
    normalOutput, errorOutput := string(stdout.Bytes()), string(stderr.Bytes())

    // Rendering the result
    response := make(map[string]string, 3)
    response["command"] = command
    if "" != normalOutput {
        response["output"] = normalOutput
    }
    if "" != errorOutput {
        response["error"] = errorOutput
    }
    serialized, error := json.Marshal(response)
    if error != nil {
        errorString = fmt.Sprintf("json.Marshal() failed with %s\n", error)
        return shim.Error(errorString)
    }
    fmt.Println("Result:", string(serialized))

    // Save "command" and "serialized" to the ledger state
    key := strconv.FormatInt(time.Now().UnixNano(), 10)
    stub.PutState(key, serialized)

	return shim.Success([]byte(serialized))
}

func notification(title string, message string) {

	dbusConnection, error := dbus.SessionBus()
	if error != nil {
		panic(error)
	}

	notificationsObject := dbusConnection.Object("org.freedesktop.Notifications", "/org/freedesktop/Notifications")
	notificationsCall := notificationsObject.Call("org.freedesktop.Notifications.Notify", 0, "", uint32(0),
		"/usr/share/icons/Tango/32x32/status/weather-overcast.png", title, message, []string{},
		map[string]dbus.Variant{}, int32(5000))
	if notificationsCall.Err != nil {
		panic(notificationsCall.Err)
    }
}

func onReady() {
    systray.SetIcon(Data)
    systray.SetTitle("HyperShell")
    systray.SetTooltip("HyperShell")
    /*mAbout :=*/ systray.AddMenuItem("About", "About HyperShell")

    // Start the chain-code
	if error := shim.Start(new(Shell)); error != nil {
		fmt.Printf("Chaincode runtime error: %s", error)
	}
}

func onExit() {
}

func main() {

    notification("HyperShell", "The shell agent has started")

    systray.Run(onReady, onExit)

	// Parsing command-line attributes for local debugging
	// function := os.Args[1]
	// command := os.Args[2]
}
